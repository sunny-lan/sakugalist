Design goals

 - Separate VideoViewer component. This should be able to work without the server, excepting bookmark saving
    - frame step
    - loop
    - jump to bookmarks
    - should be able to view videos from a variety of sources, including web urls and local files
 - Searchable metadata (animator, show, episode)
 - Bookmarks to times in videos, with metadata
 - How to view gifs?


How to implement it
server responsibility:
    save video metadata.
    allowing searching of metadata.
    serve video from local disk.
    serve videoviewer files


client responsilibity:
    videoviewer responsilibity:
        display video and bookmarks
        be able to seek to a time, and set loop start and end time
        edit metadata
    serverhook responbility:
        supply video metadata and video URL to videoviewer.
        supply save video metadata function to videoviewer


Data types:
time: stored in seconds
video: a video URI+ a source locator (local file, web file, etc)
video id: server assigned unique ID to a video
video metadata: extra info about video: author, bookmarks, etc
video url: actual url that can be displayed in <video> html5 player

serverhook details
    - recieve video url from GET params
    - question: should localstorage and server be separate?
    - decision:
        unified metadata space. only video url is passed
        - tries to access all metadata sources
        - tries to save all metadata sources

videoviewer
    decision: whether to populate or return root?
        return root seems like better idea

    overall data flow:
    metadata: editor -> callback -> videoviewer -> server/localstorage -> successcallback -> setmetadata -> update all ui
    stepping event -> update bookmark ui
    viewer state: control -> callback -> videoviewer prop -> notify all children

    recieve element to populate

    state
        step rate
        video rate
    subelements
        bookmark editor
            responsibilities: addbookmark, removebookmark, updatebookmark, show bookmark
            ui desired behavior:
                it has a currently selected bookmark
                the currently selected bookmark is set whenever a link is clicked in the tablet of contents
                when the video is stepped:
                    if a bookmark is on the same frame, select it
                    else clear the currently selected bookmark. also set frame number
                if no currently selected bookmark, addbookmark is shown
                else remove bookmark is shown
                when removebookmark pressed, currently selected bookmark is deleted, but information is kept
                when addbookmark pressed, bookmark is added at current time
        table of contents

        metadata editor
            loadmetadata
            callback when new data is saved

        status view
            flash forwards
            flash backwards
            call setplaybackrate
            direct frame selector


        video player
            state: currentTime
            set video rate
            step forward and back
            set loop
            note: doesn't handle events


server details
    save manager: save(video)
